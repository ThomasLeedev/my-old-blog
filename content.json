{"meta":{"title":"Maze","subtitle":null,"description":null,"author":null,"url":"http://leedev.cn"},"pages":[{"title":"Tags","date":"2017-11-08T05:11:22.024Z","updated":"2016-08-20T12:18:00.000Z","comments":true,"path":"tags/index.html","permalink":"http://leedev.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker-从入门到实践","slug":"reading-notes-docker-practice","date":"2018-02-01T16:27:13.664Z","updated":"2018-02-07T05:00:53.686Z","comments":true,"path":"2018/02/02/reading-notes-docker-practice/","link":"","permalink":"http://leedev.cn/2018/02/02/reading-notes-docker-practice/","excerpt":"","text":"书籍地址：https://github.com/yeasy/docker_practice 看此书之前，先列出几个问题，等看完之后，需要能够清晰地解答这些疑问。 什么是 docker ? 它有什么用 ? docker 的原理是什么 ? 对这本书做出评价。 基础及准备工作三个基本概念：image、container、repositorydocker 安装打开 windows 的 Hyper-V 功能，可通过程序应用管理打开。 docker 下载地址：https://www.docker.com/community-edition#/download docker 镜像加速器对于使用Windows 10 的系统，在系统右下角托盘Docker 图标内右键菜单选择Settings ，打开配置窗口后左侧导航菜单选择Docker Daemon 。编辑窗口内的JSON 串，填写加速器地址，如：12345&#123;&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]&#125; 编辑完成，点击Apply 保存后Docker 服务会重新启动。 使用命令 docker info 查看是否配置成功。 使用镜像获取镜像docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签] eg：1234567891011$ docker pull ubuntu:16.04$ docker run -it --rm \\ubuntu:16.04 \\bash$ docker image ls #列出已下载的镜像$ docker system df #查看镜像、容器、数据卷所占用的空间$ docker image ls -a #显示所有镜像，包括中间层镜像 列出镜像的过滤方法有很多，如下： 1234$ docker image ls ubuntu$ docker image ls ubuntu:16.04$ docker image ls -f since=mongo:3.2$ docker image ls -f label=com.example.version=0.1 标签为 none 的镜像称为 虚悬镜像(dangling image)，通过命令 docker image ls -f dangling=true 显示虚悬镜像，通过命令 docker image prune 删除虚悬镜像。 镜像格式输出123456789101112131415161718$ docker image ls --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;5f515359c7f8: redis05a60462f8ba: nginxfe9198c04d62: mongo00285df0df87: &lt;none&gt;f753707788c5: ubuntuf753707788c5: ubuntu1e0c3dd64ccd: ubuntu$ docker image ls --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;&quot;IMAGE ID REPOSITORY TAG5f515359c7f8 redis latest05a60462f8ba nginx latestfe9198c04d62 mongo 3.200285df0df87 &lt;none&gt; &lt;none&gt;f753707788c5 ubuntu 16.04f753707788c5 ubuntu latest1e0c3dd64ccd ubuntu 14.04 镜像删除12345678910$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]# 删除通过镜像名、摘要、id 来操作$ docker image ls --digests #获取镜像摘要$ docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228# 配合 docker image ls -q 进行$ docker image rm $(docker image ls -q redis) #删除所有仓库名为redis 的镜像$ docker image rm $(docker image ls -q -f before=mongo:3.2) #删除所有在mongo:3.2 之前的镜像 12345678910docker pull nginxdocker run --name webserver -d -p 5678:80 nginx #将容器的 80 端口映射到本地的 5678 端口docker exec -it webserver bash #进入容器，修改内容root@3729b97e8226:/# echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.htmlroot@3729b97e8226:/# exitdocker diff webserver #查看变化# 将容器存为镜像，但不能滥用，commit 无法查看镜像保存之前的详细操作，不利于维护docker commit --author \"Thomas Lee &lt;59624102@qq.com&gt;\" --message \"修改了默认网页\" vigorous_perlman nginx:lt 使用 dockerfile 定制镜像建立一个空文档，无后缀名 Dockerfile。 文档里面的内容为： 1234567891011121314151617181920FROM debian:jessie #基础镜像RUN buildDeps='gcc libc6-dev make' \\&amp;&amp; apt-get update \\&amp;&amp; apt-get install -y $buildDeps \\&amp;&amp; wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\&amp;&amp; mkdir -p /usr/src/redis \\&amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\&amp;&amp; make -C /usr/src/redis \\&amp;&amp; make -C /usr/src/redis install \\# 清除不需要的无关文件，防止镜像臃肿&amp;&amp; rm -rf /var/lib/apt/lists/* \\&amp;&amp; rm redis.tar.gz \\&amp;&amp; rm -r /usr/src/redis \\&amp;&amp; apt-get purge -y --auto-remove $buildDeps# 构建镜像 docker build [选项] &lt;上下文路径/URL/-&gt;# -t nginx:v3 指定镜像名字$ docker build -t nginx:v3 . 文章内容摘录传统虚拟机技术和容器的区别传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程 直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比 传统虚拟机更为轻便。 容器镜像（Image ）和容器（Container ）的关系，就像是面向对象程序设计中的类和实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删 除、暂停等。 容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命 名空间。因此容器可以拥有自己的root 文件系统、自己的网络配置、自己的进程空间，甚 至自己的用户ID 空间。 文件写入操作不应在 容器存储器 中进行，会随容器消失，应存在 数据卷 中，或 绑定宿主目录。 DockerRegistry、仓库、Tag镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用 这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服 务。 一个Docker Registry 中可以包含多个仓库（Repository ）；每个仓库可以包含多个标签 （Tag ）；每个标签对应一个镜像。 通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版 本。我们可以通过&lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给 出标签，将以latest 作为默认标签。","categories":[],"tags":[{"name":"coder","slug":"coder","permalink":"http://leedev.cn/tags/coder/"},{"name":"读书笔记","slug":"读书笔记","permalink":"http://leedev.cn/tags/读书笔记/"},{"name":"docker","slug":"docker","permalink":"http://leedev.cn/tags/docker/"}]},{"title":"平均的终结","slug":"reading-notes-end-of-average","date":"2018-01-26T13:18:17.072Z","updated":"2018-02-01T16:07:53.788Z","comments":true,"path":"2018/01/26/reading-notes-end-of-average/","link":"","permalink":"http://leedev.cn/2018/01/26/reading-notes-end-of-average/","excerpt":"","text":"《平均的终结》提到，目前的世界是被平均思维所束缚的时代，个体变得不再重要。 然而，作者认为个体是十分重要的，由于平均思维的限制，有个性的人被认为是异类，打破了系统的平衡。 文中举了一些例子，其中让我印象比较深刻的是通过成绩来判定一个学生的好坏，以及学校的课程安排。这一切源于泰勒的思想，目的是为了节省时间成本，让学生之间都学习相同的内容，每一个学生其实都只是为了适应今后的工作而存在的，然后通过成绩的优劣，来判定学生的好坏，因为他们认为，一个学生如果在一个方面优秀，那么他在其他方面也会优秀。 作者应对平均思维提出了三个原则：锯齿性原则、情境原则、途径原则。 其中锯齿性原则讲的是人在一个方面优秀，但是在另一个方面不一定也做的好，同样，一个人在一方面做的差，但在另一方面可能做的很好。 情境原则讲的是人在不同的情境下，性格其实是不同的，作者告诉我们，当我们和一个人在交谈时，心里应该想一想，ta 在另一个情境下可能不是这样的，同时，我们在做事情的时候也要学会找到适合自己的情境。 途径原则告诉我们在做一件事情的时候，是有很多种途径的，并非只有一个途径。 想了想，其实平均原则对于我们平时的企业生产效率是很有益的，系统，不需要过多的操作，但是对于个人，则会显得死板，人变成了机器，要想走得远，就需要有打破平衡的勇气，这是自己认认真真完整看完的第一本比较长的书籍，希望自己能成为一个有个性的人吧，学习、成长有快有慢，但是只要有结果，就不辜负自己！","categories":[],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://leedev.cn/tags/读书笔记/"}]},{"title":"Retrofit + Rxjava + MVP 学习记录","slug":"practice-android-retrofit-rxjava-mvp","date":"2017-12-10T16:00:22.373Z","updated":"2018-02-01T16:13:09.396Z","comments":true,"path":"2017/12/11/practice-android-retrofit-rxjava-mvp/","link":"","permalink":"http://leedev.cn/2017/12/11/practice-android-retrofit-rxjava-mvp/","excerpt":"","text":"学习中用到的文章文章合集参考的第一篇搭建三者框架的文章将获取到的内容直接解析成 String扔物线的 Rxjava 教程简书 Rxjava 教程剪切板问题Rxjava 的一些用处WebView 不跳转系统浏览器 用到的新的开源库1. 开源库fragmentation2. circleimageview学到的新的知识点1. BottomNavigationView 的使用及其拓展 遇到的问题1. 将获取到的内容直接解析成 String，使用了开源库 Java Scalars Converter找了很多地方，花了很多时间，最后还是回到了官方的开源库 ~ 2. 没有 RxJavaCallAdapterFactory 这个类在 StackOverflow 上问了一下，回答效率真的快，还要看一下文档，链接 3. unable to parse template “Class”将模板修改回来，代码为：1234#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;;#end#parse(&quot;File Header.java&quot;)public class $&#123;NAME&#125; &#123;&#125; 4. Entry fileTemplates//Singleton.java.ft not found将 -Djdk.util.zip.ensureTrailingSlash=false 添加到安装目录的 studio64.vmoptions 文件里面。 5. ButterKnife 使用绑定 View 时出错原因是包名里边出现了 android，将其修改即可。 6. 切换 Fragment 后 WebView 总是重新加载使用 ViewPager 的缓存机制解决。解决链接 小技巧1. Atom 双击打开新的标签页解决单击打开文件覆盖当前页面的问题。 2. Android 删除行的快捷键Ctrl + x 3. svg 转 vectorhttp://inloop.github.io/svg2android/","categories":[],"tags":[{"name":"coder","slug":"coder","permalink":"http://leedev.cn/tags/coder/"},{"name":"android笔记","slug":"android笔记","permalink":"http://leedev.cn/tags/android笔记/"}]},{"title":"酱油炒饭","slug":"food-rice-jiangyou","date":"2017-12-10T05:36:48.410Z","updated":"2017-12-10T06:17:57.244Z","comments":true,"path":"2017/12/10/food-rice-jiangyou/","link":"","permalink":"http://leedev.cn/2017/12/10/food-rice-jiangyou/","excerpt":"饭很脆，有香味，小火翻炒，不错，哈哈！","text":"饭很脆，有香味，小火翻炒，不错，哈哈！ 食材准备12蛋黄、酱油、小葱。油。 具体步骤炒菜 锅内烧油，小火 将米饭放入锅内，翻炒 将蛋黄倒入锅内，和米饭一起翻炒，盛出备用 锅内放油，将米饭倒入 少量多次加入酱油，控色 加入小葱，翻炒，出锅！","categories":[],"tags":[{"name":"菜谱","slug":"菜谱","permalink":"http://leedev.cn/tags/菜谱/"}]},{"title":"蛋黄蒜香豆腐","slug":"food-tofu-jiantofu","date":"2017-12-06T13:41:10.573Z","updated":"2017-12-06T13:50:54.487Z","comments":true,"path":"2017/12/06/food-tofu-jiantofu/","link":"","permalink":"http://leedev.cn/2017/12/06/food-tofu-jiantofu/","excerpt":"很有口感的一个菜，也是我非常喜欢吃的一个菜，蒜香味加鸡蛋包裹的味道，美味。","text":"很有口感的一个菜，也是我非常喜欢吃的一个菜，蒜香味加鸡蛋包裹的味道，美味。 食材准备12豆腐、鸡蛋、蒜叶、生粉、油、盐、鸡精、胡椒粉、生抽。 具体步骤食材准备 将豆腐浸入盐水中半小时左右，然后切成片，略薄于小拇指。 取鸡蛋黄（不要蛋清）于碗中，加入生粉搅拌。 豆腐包裹蛋黄。 炒菜 锅内烧油，小火 将豆腐放入锅中，开始煎豆腐 豆腐基本煎好后，加入水，烧水 放入盐、蒜、生抽、鸡精、胡椒粉（个人口味） 豆腐煮熟，盐味足够，出锅！","categories":[],"tags":[{"name":"菜谱","slug":"菜谱","permalink":"http://leedev.cn/tags/菜谱/"}]},{"title":"豆腐炒肉","slug":"food-tofu-rou","date":"2017-12-06T13:25:08.473Z","updated":"2017-12-06T13:39:39.125Z","comments":true,"path":"2017/12/06/food-tofu-rou/","link":"","permalink":"http://leedev.cn/2017/12/06/food-tofu-rou/","excerpt":"这个菜我挺喜欢吃的，味道好，口感不错，很下饭。","text":"这个菜我挺喜欢吃的，味道好，口感不错，很下饭。 食材准备12豆腐、肉、小葱、生姜。油、盐、生抽、鸡精、酱油、胡椒粉。 具体步骤食材准备 将肉剁成肉末，将姜切成末，然后把肉末和姜混合。 将豆腐压成末。 炒菜 锅内烧油，放盐 将豆腐倒入锅中，用油烧豆腐一段时间，大概4、5分钟 加油，将肉末放入锅中，翻炒 加点水，放入鸡精、生抽、酱油、耗油、胡椒粉，小葱，翻炒后即可出锅","categories":[],"tags":[{"name":"菜谱","slug":"菜谱","permalink":"http://leedev.cn/tags/菜谱/"}]},{"title":"鸡蛋包菜炒面","slug":"food-noddles-fried","date":"2017-11-22T09:43:56.000Z","updated":"2017-11-22T10:46:14.623Z","comments":true,"path":"2017/11/22/food-noddles-fried/","link":"","permalink":"http://leedev.cn/2017/11/22/food-noddles-fried/","excerpt":"第一次炒面，味道感觉不错，口感很好。","text":"第一次炒面，味道感觉不错，口感很好。 食材准备12面条、鸡蛋、包菜、洋葱、葱、青辣椒油、盐、红烧酱油 具体步骤煮面锅中倒入水，加入小部分盐，也可以把一些需要煮的配菜一起放里边煮，将水煮开。放入面条，待快熟时捞出，放入冷水中。 炒菜烧油，放入鸡蛋，煎一会关火，将鸡蛋弄碎。放入切好的辣椒、包菜，小火翻炒。放入面条，加盐，加酱油，翻炒。放入葱、洋葱，翻炒，出锅。 bingo.","categories":[],"tags":[{"name":"菜谱","slug":"菜谱","permalink":"http://leedev.cn/tags/菜谱/"}]},{"title":"炒青菜","slug":"food-vegetables-chaoqingcai","date":"2017-11-20T09:43:56.000Z","updated":"2017-12-06T14:01:09.498Z","comments":true,"path":"2017/11/20/food-vegetables-chaoqingcai/","link":"","permalink":"http://leedev.cn/2017/11/20/food-vegetables-chaoqingcai/","excerpt":"基础小菜，出菜速度快，味道好，不油腻。","text":"基础小菜，出菜速度快，味道好，不油腻。 食材准备12青菜、蒜、姜。油、盐、生抽、鸡精、耗油。 具体步骤食材准备 切好蒜末，姜末。 洗好青菜。 炒菜 锅内烧油，放盐 将蒜末和姜末放入锅中翻炒 将青菜放入锅中，加一点水 待青菜一面快熟，将青菜翻面 翻炒，加入生抽、鸡精、耗油，翻炒 出锅！","categories":[],"tags":[{"name":"菜谱","slug":"菜谱","permalink":"http://leedev.cn/tags/菜谱/"}]},{"title":"java后端开发-商城","slug":"practice-java-end-shop","date":"2017-11-08T13:11:26.000Z","updated":"2018-02-01T16:12:55.371Z","comments":true,"path":"2017/11/08/practice-java-end-shop/","link":"","permalink":"http://leedev.cn/2017/11/08/practice-java-end-shop/","excerpt":"","text":"","categories":[],"tags":[{"name":"java后端开发","slug":"java后端开发","permalink":"http://leedev.cn/tags/java后端开发/"},{"name":"coder","slug":"coder","permalink":"http://leedev.cn/tags/coder/"}]},{"title":"hexo搭建及其探索记录","slug":"learn-hexo","date":"2017-11-08T03:57:19.000Z","updated":"2018-02-01T16:09:08.839Z","comments":true,"path":"2017/11/08/learn-hexo/","link":"","permalink":"http://leedev.cn/2017/11/08/learn-hexo/","excerpt":"此博客仅用于个人记录，欢迎一起交流。","text":"此博客仅用于个人记录，欢迎一起交流。 1.安装 Git 和 NodeJs2.配置 SSHGitBash 中输入1ssh-keygen -t rsa -C \"thomaslee.dev@gmail.com\" #要输入密码时直接回车就好了，密码用于提交内容，这样 SSH 密钥就在本地生成了 然后把生成的密钥和 GitHub 账号仓库关联起来。 输入 ssh -T git@github.com 测试是否成功。 3.本地配置设置本地的个人用户信息，用于提交时的身份判别git config --global user.name &quot;userName&quot;//你的用户名git config --global user.email &quot;userName@163.com&quot;//填写自己的邮箱 设置 npm 源，加快下载速度：npm config set registry https://registry.npm.taobao.org 1234npm install -g hexohexo inithexo ghexo s 4.部署至 Github12345678git clone https://github.com/ThomasLeedev/thomasleedev.github.io.git .deploy/thomasleedev.github.iohexo generatecp -R public/* .deploy/jacman.github.iocd .deploy/jacman.github.iogit add .git commit -m “update”git push origin master 5.后期知识总结记录 用法 功能 &lt;!--more--&gt; 用于在封面显示部分文章。 banner 用于设置首页封面。","categories":[],"tags":[{"name":"coder","slug":"coder","permalink":"http://leedev.cn/tags/coder/"},{"name":"学习记录","slug":"学习记录","permalink":"http://leedev.cn/tags/学习记录/"}]}]}